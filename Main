import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.LinkedList;
import java.util.Objects;
import java.util.Scanner;
import Objects.DisplayCase;
import Objects.Tray;
import Objects.Jewellery;
import Objects.Material;

/**
 * 此类用于启动应用程序，并初始化应用程序所需的资源。
 * This class is used to start the application and initialize the required resources.
 *
 * @author Lu Siyu
 * @version 0.0
 */
public class Main {
    private JewelleryStore jewelleryStore = new JewelleryStore();
    Scanner scanner = new Scanner(System.in);
    private LinkedList<DisplayCase> displayCases = new LinkedList<>();
    private LinkedList<Tray> trays = new LinkedList<>();
    private LinkedList<Jewellery> jewellery = new LinkedList<>();
    private LinkedList<Material> materials = new LinkedList();

    public static void main(String[] args) throws Exception {
        new Main().start();
    }

    public void start() {
        jewelleryStore = new JewelleryStore();
        runMainMenu();
    }

    //----------------------
    //      Main Menu
    //----------------------

    /**
     * 主菜单，显示应用程序的主菜单选项。
     * The main menu, which displays the options for the main menu.
     *
     * @return 选择的选项。
     * @author Lu Siyu
     * @version 0.0
     */
    private int mainMenu() {
        System.out.println("""
                 ---------Jewellery Store--------
                |  1) DisplayCase MENU           |
                |  2) Tray MENU                  |
                |  3) Jewellery MENU             |
                |  4) Material MENU              |
                |--------------------------------|
                |  5) List all                   |
                |  6) Save all                   |
                |  7) Load all                   |
                |--------------------------------|
                |  0) Exit                       |
                 --------------------------------""");
        return scanner.nextInt();
    }

    /**
     * 运行主菜单，显示应用程序的主菜单选项，并根据用户选择执行相应的操作。
     * This method runs the main menu, which displays the options for the main menu, and executes the corresponding operations based on the user's selection.
     *
     * @author Lu Siyu
     * @version 0.0
     */
    private void runMainMenu() {
        int option = mainMenu();
        while (option != 0) {
            switch (option) {
                case 1 -> runDisplayCaseMenu();
                case 2 -> runTrayMenu();
                case 3 -> runJewelleryMenu();
                case 4 -> runMaterialMenu();
                case 5 -> jewelleryStore.viewAllStock();
                /**case 5-> {
                 try {
                 jewelleryStore.save("jewellery");
                 } catch (Exception e) {
                 throw new RuntimeException(e);
                 }
                 }
                 case 6-> {
                 try {
                 jewelleryStore.load("jewellery");
                 } catch (Exception e) {
                 throw new RuntimeException(e);
                 }
                 }*/
                default -> System.out.println("Invalid option entered.");
            }
            System.out.println("Press the enter key to continue");
            scanner.nextLine();
            option = mainMenu();
        }
        //exitApp();
    }

    //----------------------
    //  DisplayCase Menu
    //----------------------

    /**
     * 运行展示柜菜单，显示展示柜菜单选项，并根据用户选择执行相应的操作。
     * This method runs the displayCase menu, which displays the options for the displayCase menu, and executes the corresponding operations based on the user's selection.
     *
     * @author LuSiyu
     * @since version 0.0
     */
    private void runDisplayCaseMenu() {
        int option = displayCaseMenu();
        while (option != 0) {
            switch (option) {
                case 1 -> addDisplayCase();
                case 2 -> deleteDisplayCase();
                case 3 -> updateDisplayCase();
                case 4 -> listAllDisplayCase();
                case 5 -> searchDisplayCase();
                default -> System.out.println("Invalid option entered.");
            }
            System.out.println("Press the enter key to continue");
            scanner.nextLine();
            option = displayCaseMenu();
        }
        runMainMenu();
    }

    /**
     * 显示展示柜菜单选项。
     * This method displays the options for the displayCase menu.
     *
     * @return 返回用户选择的选项。
     * The selected option.
     * @author LuSiyu
     * @since version 0.0
     */
    private int displayCaseMenu() {
        System.out.println("""
                 ---------DisplayCase Menu---------
                |  1) Add a DisplayCase            |
                |  2) Delete a DisplayCase         |
                |  3) Update DisplayCase details   |
                |  4) List all DisplayCases        |
                |  5) Search a DisplayCase         |
                |  0) Return to main menu          |
                 ----------------------------------""");
        int choice = scanner.nextInt();
        scanner.nextLine(); // 清除缓冲区
        return choice;
    }

    /**
     * 添加展示柜。
     * This method adds a displayCase.
     *
     * @author LuSiyu
     * @since version 0.0
     */
    private void addDisplayCase() {
        try {
            System.out.println("Please enter the DisplayCase id: ");
            String caseId = scanner.nextLine();
            System.out.println("Please enter the type(wall-mounted/freestanding): ");
            String type = scanner.nextLine();
            System.out.println("Please enter whether the DisplayCase is lighted (true/false): ");

            // 改进布尔值输入处理
            Boolean isLighted = null;
            while (isLighted == null) {
                String input = scanner.nextLine().trim().toLowerCase();
                if (input.equals("true") || input.equals("yes") || input.equals("y")) {
                    isLighted = true;
                } else if (input.equals("false") || input.equals("no") || input.equals("n")) {
                    isLighted = false;
                } else {
                    System.out.println("Invalid input. Please enter true/false, yes/no, or y/n: ");
                }
            }

            DisplayCase displayCase = new DisplayCase(caseId, type, isLighted);
            jewelleryStore.displayCases.add(displayCase);
            System.out.println("Add successful");
        } catch (Exception e) {
            System.out.println("Error adding DisplayCase: " + e.getMessage());
        }
    }

    /**
     * 删除展示柜
     * This method deletes a displayCase.
     *
     * @author Lu Siyu
     * @since version 0.0
     */
    private void deleteDisplayCase() {
        System.out.println("Please enter the DisplayCase id: ");
        String caseId = scanner.nextLine();
        jewelleryStore.removeCase(caseId);
    }

    /**
     * 更新展示柜。
     * This method updates a displayCase.
     *
     * @author Lu Siyu
     * @since version 0.0
     */
    private void updateDisplayCase() {
        System.out.println("Please enter the DisplayCase id to update: ");
        String caseId = scanner.nextLine();
        // 查找要更新的 DisplayCase
        DisplayCase targetCase = null;
        Link.Node<DisplayCase> currentNode = jewelleryStore.displayCases.getHead();
        while (currentNode != null) {
            // 添加类型检查
            if (currentNode.data instanceof DisplayCase) {
                if (currentNode.data.getCaseId().equals(caseId)) {
                    targetCase = currentNode.data;
                    break;
                }
            }
            currentNode = currentNode.next;
        }

        if (targetCase != null) {
            // 获取新的信息
            System.out.println("Please enter the type(wall-mounted/freestanding): ");
            String newType = scanner.nextLine();
            System.out.println("Please enter whether the DisplayCase is lighted (true/false): ");

            // 改进布尔值输入处理
            Boolean newIsLighted = null;
            while (newIsLighted == null) {
                String input = scanner.nextLine().trim().toLowerCase();
                if (input.equals("true") || input.equals("yes") || input.equals("y")) {
                    newIsLighted = true;
                } else if (input.equals("false") || input.equals("no") || input.equals("n")) {
                    newIsLighted = false;
                } else {
                    System.out.println("Invalid input. Please enter true/false, yes/no, or y/n: ");
                }
            }
            // 更新 DisplayCase 信息
            targetCase.setType(newType);
            targetCase.setIsLighted(newIsLighted);

            System.out.println("DisplayCase updated successfully");
        } else {
            System.out.println("DisplayCase not found");
        }
    }

    /**
     * 列出所有展示柜
     * This method lists all display cases in the jewellery store.
     *
     * @author Lusiyu
     * @since version 1.0
     */
    private void listAllDisplayCase() {
        System.out.println("--------- All Display Cases ---------");

        Link.Node<DisplayCase> caseNode = jewelleryStore.displayCases.getHead();
        boolean hasCases = false;

        while (caseNode != null) {
            if (caseNode.data instanceof DisplayCase) {
                DisplayCase displayCase = caseNode.data;
                System.out.println("Display Case ID: " + displayCase.getCaseId());
                System.out.println("  Type: " + displayCase.getType());
                System.out.println("  Lighted: " + displayCase.getIsLighted());

                // 显示该展示柜中的托盘信息
                Link.Node<Tray> trayNode = displayCase.getHead();
                System.out.print("  Trays: ");
                if (trayNode == null) {
                    System.out.println("None");
                } else {
                    int trayCount = 0;
                    while (trayNode != null) {
                        if (trayNode.data != null) {
                            trayCount++;
                        }
                        trayNode = trayNode.next;
                    }
                    System.out.println(trayCount + " tray(s)");
                }

                hasCases = true;
                System.out.println(); // 空行分隔不同展示柜
            }
            caseNode = caseNode.next;
        }

        if (!hasCases) {
            System.out.println("No display cases found.");
        }
        System.out.println("------------------------------------");
    }

    /**
     * 查找展示柜。
     * This method is to search a displayCase by the caseId.
     *
     * @author LuSiyu
     * @since version 0.0
     */
    private void searchDisplayCase() {
        System.out.println("Please enter the displayCase id: ");
        String caseId = scanner.nextLine();
        Link.Node<DisplayCase> currentNode = jewelleryStore.displayCases.getHead();
        boolean found = false;

        while (currentNode != null) {
            if (currentNode.data != null && caseId.equals(currentNode.data.getCaseId())) {
                System.out.println("Found DisplayCase: " + currentNode.data);
                found = true;
                break;
            }
            currentNode = currentNode.next;
        }

        if (!found) {
            System.out.println("DisplayCase not found with id: " + caseId);
        }
    }

    //---------------------
    //  Tray Menu
    //---------------------

    /**
     * 运行托盘菜单，显示托盘菜单选项，并根据用户选择执行相应的操作。
     * This method runs the Tray menu, which displays the options for the Tray menu, and executes the corresponding operations based on the user's selection.
     *
     * @author LuSiyu
     * @since version 0.0
     */
    private void runTrayMenu() {
        int option = TrayMenu();
        while (option != 0) {
            switch (option) {
                case 1 -> addTray();
                case 2 -> deleteTray();
                case 3 -> listAllTray();
                case 4 -> updateTray();
                case 5 -> searchTray();
                default -> System.out.println("Invalid option entered");
            }
            System.out.println("Press the enter key to continue");
            scanner.nextLine();
            option = TrayMenu();
        }
        runMainMenu();
    }

    /**
     * 显示托盘菜单选项。
     * This method displays the options for the Tray menu.
     *
     * @return 返回用户选择的选项。
     * The selected option.
     * @author LuSiyu
     * @since version 0.0
     */
    private int TrayMenu() {
        System.out.println(""" 
                 -----------Tray Menu------------
                | 1) Add a Tray                  |
                | 2) Delete a Tray               |
                | 3) List all Trays              |
                | 4) Update Tray                 |
                | 5) Search a Tray               |
                | 0) Return to main menu         |
                 ----------------------------""");
        return scanner.nextInt();
    }

    /**
     * 添加托盘。
     * This method adds a Tray.
     *
     * @author LuSiyu
     * @since version 0.0
     */
    private void addTray() {

        try {
            // 首先需要指定要添加到哪个 DisplayCase
            System.out.println("Please enter the DisplayCase id to add tray to: ");
            String caseId = scanner.next();
            // 查找目标 DisplayCase
            DisplayCase targetCase = null;
            Link.Node<DisplayCase> currentNode = jewelleryStore.displayCases.getHead();
            while (currentNode != null) {
                if (currentNode.data instanceof DisplayCase &&
                        currentNode.data.getCaseId().equals(caseId)) {
                    targetCase = currentNode.data;
                    break;
                }
                currentNode = currentNode.next;
            }

            if (targetCase == null) {
                System.out.println("DisplayCase not found with id: " + caseId);
                return;
            }
            System.out.println("Please enter the Tray id: ");
            String trayId = scanner.next();
            System.out.println("Please enter the inlayColor: ");
            String inlayColor = scanner.next();
            System.out.println("Please enter the width of the tray: ");
            double width = scanner.nextDouble();
            System.out.println("Please enter the depth of the tray: ");
            double depth = scanner.nextDouble();

            Tray tray = new Tray(trayId, inlayColor, width, depth);
            targetCase.addTray(tray);
            System.out.println("Add successful");
        } catch (Exception e) {
            System.out.println("\"Error adding Tray:" + e.getMessage());
        }
    }

    /**
     * 删除托盘。
     * This method deletes a tray.
     *
     * @author Lu Siyu
     * @since version 0.0
     */
    private void deleteTray() {
        try {
            System.out.println("Please enter the DisplayCase id where the tray is located:");
            String caseId = scanner.nextLine();
            System.out.println("Please enter the trayId to delete: ");
            String trayId = scanner.nextLine();
            // 查找目标 DisplayCase
            DisplayCase targetCase = null;
            Link.Node<DisplayCase> currentNode = jewelleryStore.displayCases.getHead();
            while (currentNode != null) {
                if (currentNode.data instanceof DisplayCase &&
                        currentNode.data.getCaseId().equals(caseId)) {
                    targetCase = currentNode.data;
                    break;
                }
                currentNode = currentNode.next;
            }
            if (targetCase == null) {
                System.out.println("DisplayCase not found with id: " + caseId);
                return;
            }

            // 从目标 DisplayCase 中删除 Tray
            // 假设 DisplayCase 类有 removeTray 方法
            Tray trayToRemove = null;
            Link.Node<Tray> trayNode = targetCase.trays.getHead(); // 假设 trays 是 Link.LinkedList<Tray> 类型
            while (trayNode != null) {
                if (trayNode.data != null && trayNode.data.getId().equals(trayId)) {
                    trayToRemove = trayNode.data;
                    break;
                }
                trayNode = trayNode.next;
            }

            if (trayToRemove != null && targetCase.trays.remove(trayToRemove)) {
                System.out.println("Tray deleted successfully from DisplayCase");
            } else {
                System.out.println("Tray not found in DisplayCase with id: " + trayId);
            }
        } catch (Exception e) {
            System.out.println("Error deleting Tray: " + e.getMessage());
        }
    }

    /**
     * 更新托盘。
     * This method updates a tray.
     *
     * @author Lu Siyu
     * @since version 0.0
     */
    private void updateTray() {
        System.out.println("Please enter the DisplayCase id where the tray is located: ");
        String caseId = scanner.next();
        System.out.println("Please enter the Tray id to update: ");
        String trayId = scanner.next();

        // 查找目标 DisplayCase
        DisplayCase targetCase = null;
        Link.Node<DisplayCase> currentNode = jewelleryStore.displayCases.getHead();
        while (currentNode != null) {
            if (currentNode.data instanceof DisplayCase &&
                    currentNode.data.getCaseId().equals(caseId)) {
                targetCase = currentNode.data;
                break;
            }
            currentNode = currentNode.next;
        }

        if (targetCase == null) {
            System.out.println("DisplayCase not found with id: " + caseId);
            return;
        }
        // 在目标 DisplayCase 中查找要更新的 Tray
        Tray targetTray = null;
        Link.Node<Tray> trayNode = targetCase.trays.getHead();
        while (trayNode != null) {
            if (trayNode.data != null && trayNode.data.getId().equals(trayId)) {
                targetTray = trayNode.data;
                break;
            }
            trayNode = trayNode.next;
        }

        if (targetTray != null) {
            // 获取新的信息
            System.out.println("Please enter the new inlayColor: ");
            String newInlayColor = scanner.next();
            System.out.println("Please enter the new width of the tray: ");
            double newWidth = scanner.nextDouble();
            System.out.println("Please enter the new depth of the tray: ");
            double newDepth = scanner.nextDouble();

            // 更新 Tray 信息
            targetTray.setInlayColor(newInlayColor);
            targetTray.setWidth(newWidth);
            targetTray.setDepth(newDepth);

            System.out.println("Tray updated successfully");
        } else {
            System.out.println("Tray not found");
        }
    }

    /**
     * 列出所有托盘
     * This method lists all trays in all display cases.
     *
     * @author LuSiyu
     * @since version 1.0
     */
    private void listAllTray() {
        System.out.println("--------- All Trays ---------");

        Link.Node<DisplayCase> caseNode = jewelleryStore.displayCases.getHead();
        boolean hasTrays = false;

        while (caseNode != null) {
            if (caseNode.data instanceof DisplayCase) {
                DisplayCase displayCase = caseNode.data;
                System.out.println("DisplayCase ID: " + displayCase.getCaseId());

                Link.Node<Tray> trayNode = displayCase.trays.getHead();
                if (trayNode == null) {
                    System.out.println("  No trays in this display case.");
                } else {
                    while (trayNode != null) {
                        if (trayNode.data != null) {
                            System.out.println("  Tray ID: " + trayNode.data.getId() +
                                    ", Inlay Color: " + trayNode.data.getInlayColor() +
                                    ", Width: " + trayNode.data.getWidth() +
                                    ", Depth: " + trayNode.data.getDepth());
                            hasTrays = true;
                        }
                        trayNode = trayNode.next;
                    }
                }
                System.out.println(); // 空行分隔不同展示柜
            }
            caseNode = caseNode.next;
        }

        if (!hasTrays) {
            System.out.println("No trays found in any display case.");
        }
        System.out.println("-----------------------------");
    }
    /**
     * 查找托盘。
     * This method is to search a tray by the keyword.
     *
     * @author LuSiyu
     * @since version 0.0
     */
    private void searchTray() {
        System.out.println("Please enter the DisplayCase id where the tray is located: ");
        String caseId = scanner.next();
        System.out.println("Please enter the tray id: ");
        String trayId = scanner.next();
        // 查找目标 DisplayCase
        DisplayCase targetCase = null;
        Link.Node<DisplayCase> currentNode = jewelleryStore.displayCases.getHead();
        while (currentNode != null) {
            if (currentNode.data instanceof DisplayCase &&
                    currentNode.data.getCaseId().equals(caseId)) {
                targetCase = currentNode.data;
                break;
            }
            currentNode = currentNode.next;
        }

        if (targetCase == null) {
            System.out.println("DisplayCase not found with id: " + caseId);
            return;
        }
        // 在目标 DisplayCase 中查找 Tray
        Link.Node<Tray> trayNode = targetCase.trays.getHead();
        boolean found = false;

        while (trayNode != null) {
            if (trayNode.data != null && trayId.equals(trayNode.data.getId())) {
                System.out.println("Found Tray: " + trayNode.data);
                found = true;
                break;
            }
            trayNode = trayNode.next;
        }

        if (!found) {
            System.out.println("Tray not found with id: " + trayId);
        }
    }

    //----------------------
    //  Jewellery Menu
    //----------------------

    /**
     * 运行珠宝菜单，显示珠宝菜单选项，并根据用户选择执行相应的操作。
     * This method runs the Jewellery menu, which displays the options for the Jewellery menu, and executes the corresponding operations based on the user's selection.
     *
     * @author LuSiyu
     * @since version 0.0
     */
    private void runJewelleryMenu() {
        int option = jewelleryMenu();
        while (option != 0) {
            switch (option) {
                case 1 -> addJewellery();
                case 2 -> deleteJewellery();
                case 3 -> updateJewellery();
                case 4 -> listAllJewellery();
                case 5 -> searchJewellery();
                default -> System.out.println("Invalid option entered.");
            }
            System.out.println("Press the enter key to continue");
            scanner.nextLine();
            option = jewelleryMenu();
        }
        runMainMenu();
    }

    /**
     * 显示珠宝菜单选项。
     * This method displays the options for the Jewellery menu.
     *
     * @return 返回用户选择的选项。
     * The selected option.
     * @author Lusiyu
     * @since version 0.0
     */
    private int jewelleryMenu() {
        System.out.println("""
                 ---------Jewellery Menu---------
                |  1) Add a Jewellery              |
                |  2) Delete a Jewellery           |
                |  3) Update Jewellery details     |
                |  4) List all Jewellery           |
                |  5) Search a Jewellery           |
                |  0) Return to main menu          |
                 ----------------------------------""");
        return scanner.nextInt();
    }

    /**
     * 添加珠宝。
     * This method adds a manufacturer.
     *
     * @author LuSiyu
     * @since version 0.0
     */
    private void addJewellery() {
        System.out.println("Please enter the jewellery id: ");
        String jewelleryId = scanner.next();
        System.out.println("Please enter the description: ");
        String description = scanner.next();
        System.out.println("Please enter the type: ");
        String type = scanner.next();
        System.out.println("Please enter the gender: ");
        String gender = scanner.next();
        System.out.println("Please enter the image URL: ");
        String imageURL = scanner.next();
        System.out.println("Please enter the price: ");
        double price = scanner.nextDouble();
        System.out.println("Please enter the material name: ");
        String materialName = scanner.next();
        Material material = new Material(materialName, null, 0, 0);

        if (jewelleryStore.smartAdd(new Jewellery(jewelleryId, description, type, gender, imageURL, price, material))){
            System.out.println("Add successful");
        }

    }

    /**
     * 删除珠宝。
     * This method deletes a jewellery.
     *
     * @author Lu Siyu
     * @since version 0.0
     */
    private void deleteJewellery() {
        System.out.println("Please enter the jewellery id: ");
        String jewelleryId = scanner.next();
        if (jewelleryStore.removeItem(jewelleryId)) {
            System.out.println("Delete successful");
        } else {
            System.out.println("Delete not successful");
        }
    }

    /**
     * 更新珠宝。
     * This method updates a jewellery.
     *
     * @author Lu Siyu
     * @since version 0.0
     */
    private void updateJewellery() {
        System.out.println("Please enter the DisplayCase id where the jewellery is located: ");
        String caseId = scanner.next();
        System.out.println("Please enter the Tray id where the jewellery is located: ");
        String trayId = scanner.next();
        System.out.println("Please enter the Jewellery id to update: ");
        String jewelleryId = scanner.next();
        // 查找目标 DisplayCase
        DisplayCase targetCase = null;
        Link.Node<DisplayCase> currentNode = jewelleryStore.displayCases.getHead();
        while (currentNode != null) {
            if (currentNode.data instanceof DisplayCase &&
                    currentNode.data.getCaseId().equals(caseId)) {
                targetCase = currentNode.data;
                break;
            }
            currentNode = currentNode.next;
        }

        if (targetCase == null) {
            System.out.println("DisplayCase not found with id: " + caseId);
            return;
        }
        // 在目标 DisplayCase 中查找 Tray
        Tray targetTray = null;
        Link.Node<Tray> trayNode = targetCase.trays.getHead();
        while (trayNode != null) {
            if (trayNode.data != null && trayNode.data.getId().equals(trayId)) {
                targetTray = trayNode.data;
                break;
            }
            trayNode = trayNode.next;
        }

        if (targetTray == null) {
            System.out.println("Tray not found with id: " + trayId);
            return;
        }
        // 在目标 Tray 中查找 Jewellery
        Jewellery targetJewellery = null;
        Link.Node<Jewellery> jewelleryNode = targetTray.getJewelleryList().getHead();
        while (jewelleryNode != null) {
            if (jewelleryNode.data != null && jewelleryNode.data.getId().equals(jewelleryId)) {
                targetJewellery = jewelleryNode.data;
                break;
            }
            jewelleryNode = jewelleryNode.next;
        }
        if (targetJewellery != null) {
            // 获取新的信息
            System.out.println("Please enter the new description: ");
            String newDescription = scanner.next();
            System.out.println("Please enter the new type: ");
            String newType = scanner.next();
            System.out.println("Please enter the new gender: ");
            String newGender = scanner.next();
            System.out.println("Please enter the new image URL: ");
            String newImageURL = scanner.next();
            System.out.println("Please enter the new price: ");
            double newPrice = scanner.nextDouble();
            System.out.println("Please enter the new material name: ");
            String newMaterialName = scanner.next();

            targetJewellery.setDescription(newDescription);
            targetJewellery.setType(newType);
            targetJewellery.setGender(newGender);
            targetJewellery.setImageURL(newImageURL);
            targetJewellery.setPrice(newPrice);
            System.out.println("Jewellery updated successfully");
        } else {
            System.out.println("Jewellery not found");
        }
    }
    /**
     * 列出所有珠宝
     * This method lists all jewellery in the jewellery store.
     *
     * @author LuSiyu
     * @since version 1.0
     */
    private void listAllJewellery() {
        System.out.println("--------- All Jewellery ---------");

        Link.Node<DisplayCase> caseNode = jewelleryStore.displayCases.getHead();
        boolean hasJewellery = false;
        int totalJewellery = 0;

        while (caseNode != null) {
            if (caseNode.data instanceof DisplayCase) {
                DisplayCase displayCase = caseNode.data;

                Link.Node<Tray> trayNode = displayCase.getHead();
                while (trayNode != null) {
                    if (trayNode.data != null) {
                        Tray tray = trayNode.data;
                        System.out.println("Display Case: " + displayCase.getCaseId() +
                                " -> Tray: " + tray.getId());

                        Link.Node<Jewellery> jewelleryNode = tray.getJewelleryList().getHead();
                        if (jewelleryNode == null) {
                            System.out.println("  No jewellery in this tray.");
                        } else {
                            while (jewelleryNode != null) {
                                if (jewelleryNode.data != null) {
                                    Jewellery jewellery = jewelleryNode.data;
                                    System.out.println("  Jewellery ID: " + jewellery.getId());
                                    System.out.println("    Description: " + jewellery.getDescription());
                                    System.out.println("    Type: " + jewellery.getType());
                                    System.out.println("    Gender: " + jewellery.getGender());
                                    System.out.println("    Price: $" + jewellery.getPrice());
                                    System.out.println("    Image URL: " + jewellery.getImageURL());

                                    // 显示材料信息
                                    Link.Node<Material> materialNode = jewellery.getMaterials().getHead();
                                    if (materialNode != null) {
                                        System.out.print("    Materials: ");
                                        while (materialNode != null) {
                                            if (materialNode.data != null) {
                                                System.out.print(materialNode.data.getName());
                                                if (materialNode.next != null && materialNode.next.data != null) {
                                                    System.out.print(", ");
                                                }
                                            }
                                            materialNode = materialNode.next;
                                        }
                                        System.out.println();
                                    }

                                    totalJewellery++;
                                    hasJewellery = true;
                                    System.out.println(); // 空行分隔不同珠宝
                                }
                                jewelleryNode = jewelleryNode.next;
                            }
                        }
                        System.out.println(); // 空行分隔不同托盘
                    }
                    trayNode = trayNode.next;
                }
            }
            caseNode = caseNode.next;
        }

        if (!hasJewellery) {
            System.out.println("No jewellery found in the store.");
        } else {
            System.out.println("Total jewellery items: " + totalJewellery);
        }
        System.out.println("--------------------------------");
    }

    /**
     * 通过关键词获取珠宝。
     * This method retrieves a jewellery by the keyword.
     *
     * @author LuSiyu
     * @since version 0.0
     */
    private void searchJewellery() {
        System.out.println("Please enter the keyword: ");
        String keyword = scanner.next();
        jewelleryStore.search(keyword);
    }


    //----------------------
    //  Material Menu
    //----------------------

    /**
     * 运行材料菜单，显示材料菜单选项，并根据用户选择执行相应的操作。
     * This method runs the material menu, which displays the options for the material menu, and executes the corresponding operations based on the user's selection.
     *
     * @author LuSiyu
     * @since version 0.0
     */
    private void runMaterialMenu() {
        int option = materialsMenu();
        while (option != 0) {
            switch (option) {
                case 1 -> addMaterial();
                case 2 -> deleteMaterial();
                case 3 -> updateMaterial();
                case 4 -> listAllMaterial();
                case 5 -> searchMaterial();
                default -> System.out.println("Invalid option entered.");
            }
            System.out.println("Press the enter key to continue");
            scanner.nextLine();
            option = materialsMenu();
        }
        runMainMenu();
    }

    /**
     * 显示材料菜单选项。
     * This method displays the options for the material menu.
     *
     * @return 返回用户选择的选项。
     * The selected option.
     * @author LuSiyu
     * @since version 0.0
     */
    private int materialsMenu() {
        System.out.println("""
                 -----------Material Menu----------
                |  1) Add a material               |
                |  2) Delete a material            |
                |  3) Update Material details      |
                |  4) List all materials           |
                |  5) Search a material            |
                |  0) Return to main menu          |
                 ----------------------------------""");
        return scanner.nextInt();
    }

    /**
     * 添加材料。
     * This method adds a material.
     *
     * @author Lusiyu
     * @since version 0.0
     */
    private void addMaterial() {
        try {
            // 首先需要找到要添加材料的珠宝
            System.out.println("Please enter the DisplayCase id where the jewellery is located: ");
            String caseId = scanner.next();
            System.out.println("Please enter the Tray id where the jewellery is located: ");
            String trayId = scanner.next();
            System.out.println("Please enter the Jewellery id to add material to: ");
            String jewelleryId = scanner.next();

            // 查找目标 DisplayCase
            DisplayCase targetCase = null;
            Link.Node<DisplayCase> caseNode = jewelleryStore.displayCases.getHead();
            while (caseNode != null) {
                if (caseNode.data instanceof DisplayCase &&
                        caseNode.data.getCaseId().equals(caseId)) {
                    targetCase = caseNode.data;
                    break;
                }
                caseNode = caseNode.next;
            }

            if (targetCase == null) {
                System.out.println("DisplayCase not found with id: " + caseId);
                return;
            }

            // 查找目标 Tray
            Tray targetTray = null;
            Link.Node<Tray> trayNode = targetCase.getHead();
            while (trayNode != null) {
                if (trayNode.data != null && trayNode.data.getId().equals(trayId)) {
                    targetTray = trayNode.data;
                    break;
                }
                trayNode = trayNode.next;
            }

            if (targetTray == null) {
                System.out.println("Tray not found with id: " + trayId);
                return;
            }

            // 查找目标 Jewellery
            Jewellery targetJewellery = null;
            Link.Node<Jewellery> jewelleryNode = targetTray.getJewelleryList().getHead();
            while (jewelleryNode != null) {
                if (jewelleryNode.data != null && jewelleryNode.data.getId().equals(jewelleryId)) {
                    targetJewellery = jewelleryNode.data;
                    break;
                }
                jewelleryNode = jewelleryNode.next;
            }

            if (targetJewellery == null) {
                System.out.println("Jewellery not found with id: " + jewelleryId);
                return;
            }

            // 输入 Material 信息
            System.out.println("Please enter the material name: ");
            String name = scanner.next();
            System.out.println("Please enter the description: ");
            String description = scanner.next();
            System.out.println("Please enter the quantity: ");
            Double quantity = scanner.nextDouble();
            System.out.println("Please enter the quality: ");
            Double quality = scanner.nextDouble();
            scanner.nextLine(); // 清除缓冲区

            Material material = new Material(name, description, quantity, quality);
            targetJewellery.addMaterial(material); // 假设 Jewellery 类有 addMaterial 方法
            System.out.println("Material added to Jewellery successfully");
        } catch (Exception e) {
            System.out.println("Error adding Material: " + e.getMessage());
        }

    }

    /**
     * 删除材料
     * This method deletes a material.
     *
     * @author Lu Siyu
     * @since version 0.0
     */
    private void deleteMaterial() {
        try {
            // 需要先找到目标珠宝
            System.out.println("Please enter the DisplayCase id where the jewellery is located: ");
            String caseId = scanner.next();
            System.out.println("Please enter the Tray id where the jewellery is located: ");
            String trayId = scanner.next();
            System.out.println("Please enter the Jewellery id to delete material from: ");
            String jewelleryId = scanner.next();
            System.out.println("Please enter the Material name to delete: ");
            String materialName = scanner.next();

            // 查找目标 DisplayCase
            DisplayCase targetCase = null;
            Link.Node<DisplayCase> caseNode = jewelleryStore.displayCases.getHead();
            while (caseNode != null) {
                if (caseNode.data instanceof DisplayCase &&
                        caseNode.data.getCaseId().equals(caseId)) {
                    targetCase = caseNode.data;
                    break;
                }
                caseNode = caseNode.next;
            }

            if (targetCase == null) {
                System.out.println("DisplayCase not found with id: " + caseId);
                return;
            }

            // 查找目标 Tray
            Tray targetTray = null;
            Link.Node<Tray> trayNode = targetCase.getHead();
            while (trayNode != null) {
                if (trayNode.data != null && trayNode.data.getId().equals(trayId)) {
                    targetTray = trayNode.data;
                    break;
                }
                trayNode = trayNode.next;
            }

            if (targetTray == null) {
                System.out.println("Tray not found with id: " + trayId);
                return;
            }

            // 查找目标 Jewellery
            Jewellery targetJewellery = null;
            Link.Node<Jewellery> jewelleryNode = targetTray.getJewelleryList().getHead();
            while (jewelleryNode != null) {
                if (jewelleryNode.data != null && jewelleryNode.data.getId().equals(jewelleryId)) {
                    targetJewellery = jewelleryNode.data;
                    break;
                }
                jewelleryNode = jewelleryNode.next;
            }

            if (targetJewellery == null) {
                System.out.println("Jewellery not found with id: " + jewelleryId);
                return;
            }

            // 查找并删除目标 Material
            Link.Node<Material> materialNode = targetJewellery.getMaterials().getHead(); // 假设 Jewellery 有 getMaterials 方法
            Link.Node<Material> prevNode = null;
            boolean found = false;

            while (materialNode != null) {
                if (materialNode.data != null && materialNode.data.getName().equals(materialName)) {
                    // 执行删除操作
                    if (prevNode == null) {
                        // 删除头节点
                        targetJewellery.getMaterials().setHead(materialNode.next.getData());
                    } else {
                        // 删除中间或尾节点
                        prevNode.next = materialNode.next;
                    }
                    found = true;
                    System.out.println("Material deleted successfully from Jewellery");
                    break;
                }
                prevNode = materialNode;
                materialNode = materialNode.next;
            }

            if (!found) {
                System.out.println("Material not found with name: " + materialName);
            }
        } catch (Exception e) {
            System.out.println("Error deleting Material: " + e.getMessage());
        }
    }


    /**
     * 更新材料。
     * This method updates a material.
     *
     * @author Lu Siyu
     * @since version 0.0
     */
    private void updateMaterial() {
        try {
            // 需要先找到目标珠宝
            System.out.println("Please enter the DisplayCase id where the jewellery is located: ");
            String caseId = scanner.next();
            System.out.println("Please enter the Tray id where the jewellery is located: ");
            String trayId = scanner.next();
            System.out.println("Please enter the Jewellery id where the material is located: ");
            String jewelleryId = scanner.next();
            System.out.println("Please enter the Material name to update: ");
            String materialName = scanner.next();

            // 查找目标 DisplayCase
            DisplayCase targetCase = null;
            Link.Node<DisplayCase> caseNode = jewelleryStore.displayCases.getHead();
            while (caseNode != null) {
                if (caseNode.data instanceof DisplayCase &&
                        caseNode.data.getCaseId().equals(caseId)) {
                    targetCase = caseNode.data;
                    break;
                }
                caseNode = caseNode.next;
            }

            if (targetCase == null) {
                System.out.println("DisplayCase not found with id: " + caseId);
                return;
            }

            // 查找目标 Tray
            Tray targetTray = null;
            Link.Node<Tray> trayNode = targetCase.getHead();
            while (trayNode != null) {
                if (trayNode.data != null && trayNode.data.getId().equals(trayId)) {
                    targetTray = trayNode.data;
                    break;
                }
                trayNode = trayNode.next;
            }

            if (targetTray == null) {
                System.out.println("Tray not found with id: " + trayId);
                return;
            }

            // 查找目标 Jewellery
            Jewellery targetJewellery = null;
            Link.Node<Jewellery> jewelleryNode = targetTray.getJewelleryList().getHead();
            while (jewelleryNode != null) {
                if (jewelleryNode.data != null && jewelleryNode.data.getId().equals(jewelleryId)) {
                    targetJewellery = jewelleryNode.data;
                    break;
                }
                jewelleryNode = jewelleryNode.next;
            }

            if (targetJewellery == null) {
                System.out.println("Jewellery not found with id: " + jewelleryId);
                return;
            }

            // 查找目标 Material
            Material targetMaterial = null;
            Link.Node<Material> materialNode = targetJewellery.getMaterials().getHead();
            while (materialNode != null) {
                if (materialNode.data != null && materialNode.data.getName().equals(materialName)) {
                    targetMaterial = materialNode.data;
                    break;
                }
                materialNode = materialNode.next;
            }

            if (targetMaterial != null) {
                // 获取新的信息
                System.out.println("Please enter the new description: ");
                String newDescription = scanner.next();
                System.out.println("Please enter the new quantity: ");
                Double newQuantity = scanner.nextDouble();
                System.out.println("Please enter the new quality: ");
                Double newQuality = scanner.nextDouble();
                scanner.nextLine(); // 清除缓冲区

                // 更新 Material 信息
                targetMaterial.setDescription(newDescription);
                targetMaterial.setQuantity(newQuantity);
                targetMaterial.setQuality(newQuality);

                System.out.println("Material updated successfully");
            } else {
                System.out.println("Material not found with name: " + materialName);
            }
        } catch (Exception e) {
            System.out.println("Error updating Material: " + e.getMessage());
        }
    }

    /**
     * 列出所有材料
     * This method lists all materials in the jewellery store.
     *
     * @author Lusiyu
     * @since version 1.0
     */
    private void listAllMaterial() {
        System.out.println("--------- All Materials ---------");

        Link.Node<DisplayCase> caseNode = jewelleryStore.displayCases.getHead();
        boolean hasMaterials = false;
        int totalMaterials = 0;

        while (caseNode != null) {
            if (caseNode.data instanceof DisplayCase) {
                DisplayCase displayCase = caseNode.data;

                Link.Node<Tray> trayNode = displayCase.getHead();
                while (trayNode != null) {
                    if (trayNode.data != null) {
                        Tray tray = trayNode.data;

                        Link.Node<Jewellery> jewelleryNode = tray.getJewelleryList().getHead();
                        while (jewelleryNode != null) {
                            if (jewelleryNode.data != null) {
                                Jewellery jewellery = jewelleryNode.data;
                                System.out.println("Display Case: " + displayCase.getCaseId() +
                                        " -> Tray: " + tray.getId() +
                                        " -> Jewellery: " + jewellery.getId());

                                Link.Node<Material> materialNode = jewellery.getMaterials().getHead();
                                if (materialNode == null) {
                                    System.out.println("  No materials for this jewellery.");
                                } else {
                                    while (materialNode != null) {
                                        if (materialNode.data != null) {
                                            Material material = materialNode.data;
                                            System.out.println("  Material Name: " + material.getName());
                                            System.out.println("    Description: " + material.getDescription());
                                            System.out.println("    Quantity: " + material.getQuantity());
                                            System.out.println("    Quality: " + material.getQuality());

                                            totalMaterials++;
                                            hasMaterials = true;
                                            System.out.println(); // 空行分隔不同材料
                                        }
                                        materialNode = materialNode.next;
                                    }
                                }
                                System.out.println(); // 空行分隔不同珠宝
                            }
                            jewelleryNode = jewelleryNode.next;
                        }
                    }
                    trayNode = trayNode.next;
                }
            }
            caseNode = caseNode.next;
        }

        if (!hasMaterials) {
            System.out.println("No materials found in the store.");
        } else {
            System.out.println("Total materials: " + totalMaterials);
        }
        System.out.println("--------------------------------");
    }
    /**
     * 通过关键词查找材料。
     * This method retrieves a material by the keyword.
     *
     * @author LuSiyu
     * @since version 0.0
     */
    private void searchMaterial() {
        try {
            // 需要先找到目标珠宝
            System.out.println("Please enter the DisplayCase id where the jewellery is located: ");
            String caseId = scanner.next();
            System.out.println("Please enter the Tray id where the jewellery is located: ");
            String trayId = scanner.next();
            System.out.println("Please enter the Jewellery id where the material is located: ");
            String jewelleryId = scanner.next();
            System.out.println("Please enter the material name or keyword to search: ");
            String keyword = scanner.next();

            // 查找目标 DisplayCase
            DisplayCase targetCase = null;
            Link.Node<DisplayCase> caseNode = jewelleryStore.displayCases.getHead();
            while (caseNode != null) {
                if (caseNode.data instanceof DisplayCase &&
                        caseNode.data.getCaseId().equals(caseId)) {
                    targetCase = caseNode.data;
                    break;
                }
                caseNode = caseNode.next;
            }

            if (targetCase == null) {
                System.out.println("DisplayCase not found with id: " + caseId);
                return;
            }

            // 查找目标 Tray
            Tray targetTray = null;
            Link.Node<Tray> trayNode = targetCase.getHead();
            while (trayNode != null) {
                if (trayNode.data != null && trayNode.data.getId().equals(trayId)) {
                    targetTray = trayNode.data;
                    break;
                }
                trayNode = trayNode.next;
            }

            if (targetTray == null) {
                System.out.println("Tray not found with id: " + trayId);
                return;
            }

            // 查找目标 Jewellery
            Jewellery targetJewellery = null;
            Link.Node<Jewellery> jewelleryNode = targetTray.getJewelleryList().getHead();
            while (jewelleryNode != null) {
                if (jewelleryNode.data != null && jewelleryNode.data.getId().equals(jewelleryId)) {
                    targetJewellery = jewelleryNode.data;
                    break;
                }
                jewelleryNode = jewelleryNode.next;
            }

            if (targetJewellery == null) {
                System.out.println("Jewellery not found with id: " + jewelleryId);
                return;
            }

            // 在目标 Jewellery 中查找 Material
            Link.Node<Material> materialNode = targetJewellery.getMaterials().getHead();
            boolean found = false;

            while (materialNode != null) {
                if (materialNode.data != null &&
                        (materialNode.data.getName().contains(keyword) ||
                                materialNode.data.getDescription().contains(keyword))) {
                    System.out.println("Found Material: " + materialNode.data);
                    found = true;
                    break;
                }
                materialNode = materialNode.next;
            }

            if (!found) {
                System.out.println("No matching Material found with keyword: " + keyword);
            }
        } catch (Exception e) {
            System.out.println("Error searching Material: " + e.getMessage());
        }
    }
}



import Link.LinkedList;
import Link.Node;
import Objects.DisplayCase;
import Objects.Jewellery;
import Objects.Material;
import Objects.Tray;

import java.util.Scanner;
public class JewelleryStore {

    LinkedList<Object> displayCases = null;
    // Remove a case.
    public void removeCase(String caseId) {
        if (displayCases == null || displayCases.getHead() == null) {
            System.out.println("No cases to remove.");
            return;
        }
        Node<DisplayCase> caseNode = displayCases.getHead();
        Node<DisplayCase> prevNode = null;

        while (caseNode != null) {
            if (caseNode.data != null && caseId.equals(caseNode.data.getCaseId())) {
                if (prevNode == null) {
                    // 删除头节点
                    displayCases.setHead(caseNode.next);
                } else {
                    // 删除中间或尾节点
                    prevNode.next = caseNode.next;
                }
                System.out.println("Removed successfully.");
                return;
            }
            prevNode = caseNode;
            caseNode = caseNode.next;
        }
        System.out.println("Case not found.");
    }
    // View all stock.
    public void viewAllStock() {
        if (displayCases == null || displayCases.getHead() == null) {
            System.out.println("No items in stock.");
            return;
        }
        System.out.println("========= ALL STOCK =========");
        // 遍历所有展示柜
        Node<DisplayCase> caseNode = displayCases.getHead();
        while (caseNode != null) {
            if (caseNode.data instanceof DisplayCase) {
                DisplayCase displayCase = caseNode.data;
                System.out.println("=== Display Case: " + displayCase.getCaseId() +
                        " (Type: " + displayCase.getType() +
                        ", Lighted: " + displayCase.getIsLighted() + ") ===");

                // 遍历展示柜中的托盘
                Node<Tray> trayNode = displayCase.trays.getHead();
                if (trayNode == null) {
                    System.out.println("  No trays in this display case.");
                } else {
                    while (trayNode != null) {
                        if (trayNode.data != null) {
                            Tray tray = trayNode.data;
                            System.out.println("  --- Tray: " + tray.getId() +
                                    " (Color: " + tray.getInlayColor() +
                                    ", Size: " + tray.getWidth() + "x" + tray.getDepth() + ") ---");

                            // 遍历托盘中的珠宝
                            Node<Jewellery> jewelleryNode = tray.getJewelleryList().getHead();
                            if (jewelleryNode == null) {
                                System.out.println("    No jewellery in this tray.");
                            } else {
                                while (jewelleryNode != null) {
                                    if (jewelleryNode.data != null) {
                                        Jewellery jewellery = jewelleryNode.data;
                                        System.out.println("    *** Jewellery: " + jewellery.getId() +
                                                " (Type: " + jewellery.getType() +
                                                ", Gender: " + jewellery.getGender() +
                                                ", Price: $" + jewellery.getPrice() + ") ***");
                                        System.out.println("        Description: " + jewellery.getDescription());
                                        System.out.println("        Image URL: " + jewellery.getImageURL());

                                        // 遍历珠宝中的材料
                                        Node<Material> materialNode = jewellery.getMaterials().getHead();
                                        if (materialNode == null) {
                                            System.out.println("        No materials for this jewellery.");
                                        } else {
                                            System.out.println("        Materials:");
                                            while (materialNode != null) {
                                                if (materialNode.data != null) {
                                                    Material material = materialNode.data;
                                                    System.out.println("          - " + material.getName() +
                                                            " (Quantity: " + material.getQuantity() +
                                                            ", Quality: " + material.getQuality() + ")");
                                                    System.out.println("            Description: " + material.getDescription());
                                                }
                                                materialNode = materialNode.next;
                                            }
                                        }
                                    }
                                    jewelleryNode = jewelleryNode.next;
                                    if (jewelleryNode != null && jewelleryNode.data != null) {
                                        System.out.println(); // 珠宝之间的空行
                                    }
                                }
                            }
                        }
                        trayNode = trayNode.next;
                        if (trayNode != null && trayNode.data != null) {
                            System.out.println(); // 托盘之间的空行
                        }
                    }
                }
            }
            caseNode = caseNode.next;
            if (caseNode != null && caseNode.data != null) {
                System.out.println("\n" + "=".repeat(50) + "\n"); // 展示柜之间的分隔线
            }
        }
        System.out.println("=============================");
    }

    // Search.
    public void search(String keyword) {
        if (displayCases == null || displayCases.getHead() == null) {
            System.out.println("No items to search.");
            return;
        }
        boolean found = false;
        // 遍历所有 case → tray → item
        Node<DisplayCase> caseNode = displayCases.getHead();
        if (caseNode.data != null) {
            // 遍历展示柜中的托盘
            Node<Tray> trayNode = caseNode.data.getHead();
            while (trayNode != null) {
                if (trayNode.data != null) {
                    // 遍历托盘中的珠宝
                    Node<Jewellery> jewelleryNode = trayNode.data.getJewelleryList().getHead();
                    while (jewelleryNode != null) {
                        if (jewelleryNode.data != null) {
                            // 检查珠宝的描述或ID是否匹配关键词
                            if (keyword.equals(jewelleryNode.data.getDescription()) ||
                                    keyword.equals(jewelleryNode.data.getId())) {
                                System.out.println("Found: " + jewelleryNode.data);
                                found = true;
                            }
                        }
                        jewelleryNode = jewelleryNode.next;
                    }
                }
                trayNode = trayNode.next;
            }
        }
            caseNode = caseNode.next;
        if (!found) {
            System.out.println("Not found.");
        }
    }

    /**
     * 智能添加珠宝到合适的展示柜和托盘中
     * Smartly adds a jewellery to an appropriate display case and tray.
     *
     * @param item 要添加的珠宝
     * @author LuSiyu
     * @since version 1.0
     */
    public boolean smartAdd(Jewellery item) {
        // 自动选择存放珠宝的展示柜和托盘。
        if (displayCases == null || displayCases.getHead() == null) {
            System.out.println("No display cases available.");
            return false;
        }

        Node<DisplayCase> caseNode = displayCases.getHead();

        // 遍历所有展示柜和托盘，寻找匹配类型的位置
        while (caseNode != null && caseNode.data != null) {
            Node<Tray> trayNode = caseNode.data.getHead();

            while (trayNode != null && trayNode.data != null) {
                // 检查托盘中是否已有相同类型的珠宝
                Node<Jewellery> jewelleryNode = trayNode.data.getJewelleryList().getHead();
                boolean foundSameType = false;

                while (jewelleryNode != null && jewelleryNode.data != null) {
                    if (jewelleryNode.data.getType().equals(item.getType())) {
                        foundSameType = true;
                        break;
                    }
                    jewelleryNode = jewelleryNode.next;
                }

                // 如果找到相同类型的珠宝，就将新珠宝添加到同一托盘
                if (foundSameType) {
                    trayNode.data.getJewelleryList().add(item);
                    System.out.println("Jewellery added to existing tray with same type.");
                    return true;
                }

                trayNode = trayNode.next;
            }
            caseNode = caseNode.next;
        }

        // 如果没有找到相同类型的珠宝，添加到第一个可用的托盘
        caseNode = displayCases.getHead();
        while (caseNode != null && caseNode.data != null) {
            Node<Tray> trayNode = caseNode.data.getHead();
            while (trayNode != null && trayNode.data != null) {
                trayNode.data.getJewelleryList().add(item);
                System.out.println("Jewellery added to first available tray.");
                return true;
            }
            caseNode = caseNode.next;
        }

        System.out.println("No trays available in any display case.");
        return false;
    }

    // Remove item.
    public boolean removeItem(String itemId) {
        // TODO: 遍历所有 case → tray → item
        Node<Object> dispkayCases = null;
        Node<DisplayCase> DisplayCaseNode = dispkayCases.getHead();
        while (DisplayCaseNode != null) {
            Node<Tray> trayNode = DisplayCaseNode.data.trays.getHead();
            while (trayNode != null) {
                Node<Jewellery> itemNode = trayNode.data.getJewelleryList().getHead();
                while (itemNode != null) {
                    if (itemId.equals(itemNode.data.getId())) {
                        trayNode.data.getJewelleryList().remove(itemNode.data);
                    } else {
                        System.out.println("Not found.");
                    }
                }
            }
        }
        return false;
    }


    // Value stock.
    public double valueStock() {
        double value = 0;
        Node<Object> displayCases = null;
        Node<DisplayCase> caseNode = displayCases.getHead();
        while (caseNode != null) {
            Node<Tray> trayNode = caseNode.data.trays.getHead();
            while (trayNode != null) {
                Node<Jewellery> itemNode = trayNode.data.getJewelleryList().getHead();
                while (itemNode != null) {
                    value += itemNode.data.getPrice();
                    itemNode = itemNode.next;
                    System.out.println("=== " + itemNode.data.getId() + " ===");
                    System.out.println("Value: " + value);
                    return value;
                }
            }
            caseNode = caseNode.next;
            System.out.println("=== " + caseNode.data.caseId + " ===");
            System.out.println("Value: " + value);
            return value;
        }
        return value;
    }

    // Reset facility.
    public void reset() {
        LinkedList<Object> displayCases = null;
        Node<DisplayCase> caseNode = displayCases.getHead();
        while (caseNode != null) {
            Node<Tray> trayNode = caseNode.data.trays.getHead();
            while (trayNode != null) {
                trayNode.data.getJewelleryList().removeAll();
                trayNode = trayNode.next;
            }
            caseNode = caseNode.next;
        }
        System.out.println("Reset successfully.");
    }

    // Save.

    /**
    public void save(String filename) {
        // TODO: 保存到文件
        try {
            // 保存 DisplayCase 数据
            PrintWriter caseWriter = new PrintWriter(new FileWriter(filename + "_cases.csv"));
            caseWriter.println("caseId,isLocked");

            // 保存 Tray 数据
            PrintWriter trayWriter = new PrintWriter(new FileWriter(filename + "_trays.csv"));
            trayWriter.println("trayId,caseId,isLocked");

            // 保存 Jewellery 数据
            PrintWriter jewelleryWriter = new PrintWriter(new FileWriter(filename + "_jewellery.csv"));
            jewelleryWriter.println("name,description,type,price,trayId");

            // 保存 Material 数据
            PrintWriter materialWriter = new PrintWriter(new FileWriter(filename + "_materials.csv"));
            materialWriter.println("materialType,quality,jewelleryName");

            Node<Object> displayCases = null;
            Node<DisplayCase> caseNode = displayCases.getHead();
            while (caseNode != null) {
                DisplayCase displayCase = caseNode.data;
                // 写入 case 数据
                caseWriter.println(displayCase.caseId + "," + displayCase.isLighted);

                // 遍历 trays
                Node<Tray> trayNode = displayCase.trays.getHead();
                while (trayNode != null) {
                    Tray tray = trayNode.data;
                    // 写入 tray 数据
                    trayWriter.println(tray.id + "," + displayCase.caseId + "," + tray.inlayColor);

                    // 遍历 jewellery
                    Node<Jewellery> jewelleryNode = tray.jewelleryList.getHead();
                    while (jewelleryNode != null) {
                        Jewellery jewellery = jewelleryNode.data;
                        // 写入 jewellery 数据
                        jewelleryWriter.println(jewellery.name + "," + jewellery.description + "," +
                                jewellery.type + "," + jewellery.price + "," + tray.id);

                        // 遍历 materials
                        Node<Material> materialNode = jewellery.materials.getHead();
                        while (materialNode != null) {
                            Material material = materialNode.data;
                            // 写入 material 数据
                            materialWriter.println(material.description + "," + material.quality + "," + jewellery.name);
                            materialNode = materialNode.next;
                        }
                        jewelleryNode = jewelleryNode.next;
                    }
                    trayNode = trayNode.next;
                }
                caseNode = caseNode.next;
            }

            caseWriter.close();
            trayWriter.close();
            jewelleryWriter.close();
            materialWriter.close();

            System.out.println("Data saved successfully.");
        } catch (IOException e) {
            System.out.println("Error saving data: " + e.getMessage());
        }
    }


    public void load(String filename) {
        try {
            // 清空现有数据
            displayCases.removeAll();

            // 加载 DisplayCase 数据
            BufferedReader caseReader = new BufferedReader(new FileReader(filename + "_cases.csv"));
            caseReader.readLine(); // 跳过标题行

            String line;
            while ((line = caseReader.readLine()) != null) {
                String[] parts = line.split(",");
                DisplayCase displayCase = new DisplayCase(parts[0], Boolean.parseBoolean(parts[1]));
                displayCases.add(displayCase);
            }
            caseReader.close();

            // 加载 Tray 数据
            BufferedReader trayReader = new BufferedReader(new FileReader(filename + "_trays.csv"));
            trayReader.readLine(); // 跳过标题行

            while ((line = trayReader.readLine()) != null) {
                String[] parts = line.split(",");
                String trayId = parts[0];
                String caseId = parts[1];
                boolean isLocked = Boolean.parseBoolean(parts[2]);

                // 找到对应的 DisplayCase 并添加 Tray
                Node<DisplayCase> caseNode = displayCases.getHead();
                while (caseNode != null) {
                    if (caseNode.data.caseId.equals(caseId)) {
                        Tray tray = new Tray(trayId, "", "", isLocked);
                        caseNode.data.trays.add(tray);
                        break;
                    }
                    caseNode = caseNode.next;
                }
            }
            trayReader.close();

            // 加载 Jewellery 数据
            BufferedReader jewelleryReader = new BufferedReader(new FileReader(filename + "_jewellery.csv"));
            jewelleryReader.readLine(); // 跳过标题行

            while ((line = jewelleryReader.readLine()) != null) {
                String[] parts = line.split(",");
                String name = parts[0];
                String description = parts[1];
                String type = parts[2];
                double price = Double.parseDouble(parts[3]);
                String trayId = parts[4];

                Jewellery jewellery = new Jewellery(name, description, type, price);

                // 找到对应的 Tray 并添加 Jewellery
                Node<DisplayCase> caseNode = displayCases.getHead();
                while (caseNode != null) {
                    Node<Tray> trayNode = caseNode.data.trays.getHead();
                    while (trayNode != null) {
                        if (trayNode.data.trayId.equals(trayId)) {
                            trayNode.data.jewelleryList.add(jewellery);
                            break;
                        }
                        trayNode = trayNode.next;
                    }
                    caseNode = caseNode.next;
                }
            }
            jewelleryReader.close();

            // 加载 Material 数据
            BufferedReader materialReader = new BufferedReader(new FileReader(filename + "_materials.csv"));
            materialReader.readLine(); // 跳过标题行

            while ((line = materialReader.readLine()) != null) {
                String[] parts = line.split(",");
                String materialType = parts[0];
                String quality = parts[1];
                String jewelleryName = parts[2];

                Material material = new Material(materialType, quality);

                // 找到对应的 Jewellery 并添加 Material
                Node<DisplayCase> caseNode = displayCases.getHead();
                while (caseNode != null) {
                    Node<Tray> trayNode = caseNode.data.trays.getHead();
                    while (trayNode != null) {
                        Node<Jewellery> jewelleryNode = trayNode.data.jewelleryList.getHead();
                        while (jewelleryNode != null) {
                            if (jewelleryNode.data.name.equals(jewelleryName)) {
                                jewelleryNode.data.materials.add(material);
                                break;
                            }
                            jewelleryNode = jewelleryNode.next;
                        }
                        trayNode = trayNode.next;
                    }
                    caseNode = caseNode.next;
                }
            }
            materialReader.close();

            System.out.println("Data loaded successfully.");
        } catch (IOException e) {
            System.out.println("Error loading data: " + e.getMessage());
        }
    }
     **/

    public JewelleryStore() {
        this.displayCases = new LinkedList<>();
    }
}
